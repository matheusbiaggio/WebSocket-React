{"ast":null,"code":"var _jsxFileName = \"/home/biaggio/\\xC1rea de Trabalho/react-ws/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport useWebSocket from 'react-use-websocket';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [temperature, setTemperature] = useState(0);\n  const {\n    lastJsonMessage,\n    sendMessage\n  } = useWebSocket('ws://localhost:3001', {\n    onOpen: () => console.log(`Connected to App WS`),\n    onMessage: () => {\n      if (lastJsonMessage) {\n        setTemperature(lastJsonMessage.temperature);\n      }\n    },\n    queryParams: {\n      'topic': 'temperature'\n    },\n    onError: event => {\n      console.error(event);\n    },\n    shouldReconnect: closeEvent => true,\n    reconnectInterval: 3000\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: temperature\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MdUh1an2WiLOtdVH6Md3PWlAVr0=\", false, function () {\n  return [useWebSocket];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useWebSocket","useState","jsxDEV","_jsxDEV","App","_s","temperature","setTemperature","lastJsonMessage","sendMessage","onOpen","console","log","onMessage","queryParams","onError","event","error","shouldReconnect","closeEvent","reconnectInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/biaggio/Área de Trabalho/react-ws/frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport useWebSocket from 'react-use-websocket';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [temperature, setTemperature] = useState(0);\n\n  const { lastJsonMessage, sendMessage } = useWebSocket('ws://localhost:3001', {\n    onOpen: () => console.log(`Connected to App WS`),\n    onMessage: () => {\n      if (lastJsonMessage) {\n        setTemperature(lastJsonMessage.temperature);\n      }\n    },\n    queryParams: { 'topic': 'temperature' },\n    onError: (event) => { console.error(event); },\n    shouldReconnect: (closeEvent) => true,\n    reconnectInterval: 3000\n  });\n\n  return (\n    <div>\n      {temperature}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAM;IAAEO,eAAe;IAAEC;EAAY,CAAC,GAAGT,YAAY,CAAC,qBAAqB,EAAE;IAC3EU,MAAM,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAE,qBAAoB,CAAC;IAChDC,SAAS,EAAEA,CAAA,KAAM;MACf,IAAIL,eAAe,EAAE;QACnBD,cAAc,CAACC,eAAe,CAACF,WAAW,CAAC;MAC7C;IACF,CAAC;IACDQ,WAAW,EAAE;MAAE,OAAO,EAAE;IAAc,CAAC;IACvCC,OAAO,EAAGC,KAAK,IAAK;MAAEL,OAAO,CAACM,KAAK,CAACD,KAAK,CAAC;IAAE,CAAC;IAC7CE,eAAe,EAAGC,UAAU,IAAK,IAAI;IACrCC,iBAAiB,EAAE;EACrB,CAAC,CAAC;EAEF,oBACEjB,OAAA;IAAAkB,QAAA,EACGf;EAAW;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACpB,EAAA,CAtBQD,GAAG;EAAA,QAI+BJ,YAAY;AAAA;AAAA0B,EAAA,GAJ9CtB,GAAG;AAwBZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}